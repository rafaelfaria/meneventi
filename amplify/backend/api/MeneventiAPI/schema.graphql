type User @model(subscriptions: null)
  @auth(
    rules: [
      { allow: owner, ownerField: "username" }
      { allow: private, operations: [read, update], provider: iam },
      { allow: groups, groups: ["Admin"] }
    ]
  )
{
  username: String! @primaryKey
  email: String!
  name: String!
  initials: String
  photo: String
}

type Tournament @model
  @auth(
    rules: [
      { allow: owner },
      { allow: private, operations: [read, update], provider: iam },
      { allow: groups, groups: ["Admin"] }
    ]
  )
{
  id: ID!
  name: String
  date: AWSDateTime
  totalPrize: Float
  buyIn: Int
  leaderboard: [TournamentLeaderboard]
}

type TournamentLeaderboard {
  place: Int
  username: String
  email: String
  name: String
  photo: String
  buyIn: Float
  prize: Float
}


type Subscription {
  onCreateTournamentPublic: Tournament
      @aws_subscribe(mutations: ["createTournament"])
      @aws_iam
      @aws_cognito_user_pools
  onUpdateTournamentPublic: Tournament
      @aws_subscribe(mutations: ["updateTournament"])
      @aws_iam
      @aws_cognito_user_pools
  onDeleteTournamentPublic: Tournament
      @aws_subscribe(mutations: ["deleteTournament"])
      @aws_iam
      @aws_cognito_user_pools

}